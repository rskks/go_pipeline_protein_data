# 2. Clean accession/entry names
# ----------------------------
protein_data_clean <- protein_data_normalized %>%
mutate(
# Remove any " (+1)" or similar scaffold suffix
AccessionClean = str_remove(`Accession Number`, "\\s*\\(\\+.*\\)"),
# Extract UniProtID if present (middle piece)
UniProtID = str_extract(AccessionClean, "(?<=\\|)[A-Z0-9]+(?=\\|)"),
# Extract entry name (right-hand piece)
EntryName = str_extract(AccessionClean, "[A-Z0-9_]+(?=\\|?$)"),
# Create Gene symbol for human/mouse/bovine (strip species suffix)
GeneSymbol = str_remove(EntryName, "_[A-Z]+$")
) %>%
# Filter out rows with no UniProtID
filter(!is.na(UniProtID))
View(protein_data)
View(protein_data_normalized)
View(protein_data_clean)
##gost query
# Get gene symbols for this species
genes_sp <- protein_data_clean %>%
pull(GeneSymbol) %>%
unique()
# Fetch GO annotations
gost_sp <- gost(
query = genes_sp,
organism = organism_code,
sources = c("GO:BP", "GO:MF", "GO:CC")
)
library(gprofiler2)
##gost query
# Get gene symbols for this species
genes_sp <- protein_data_clean %>%
pull(GeneSymbol) %>%
unique()
# Fetch GO annotations
gost_sp <- gost(
query = genes_sp,
organism = organism_code,
sources = c("GO:BP", "GO:MF", "GO:CC")
)
##gost query
# Get gene symbols for this species
genes_sp <- protein_data_clean %>%
pull(GeneSymbol) %>%
unique()
# Fetch GO annotations
gost_sp <- gost(
query = genes_sp,
sources = c("GO:BP", "GO:MF", "GO:CC")
)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr)
library(stringr)
library(gprofiler2)
library(httr)
library(jsonlite)
library(xml2)
##gost query
# Get gene symbols for this species
genes_sp <- protein_data_clean %>%
pull(GeneSymbol) %>%
unique()
# Fetch GO annotations
gost_sp <- gost(
query = genes_sp,
sources = c("GO:BP", "GO:MF", "GO:CC")
)
# ----------------------------
# 2. Clean accession/entry names
# ----------------------------
protein_data_clean <- protein_data_normalized %>%
mutate(
# Remove any " (+1)" or similar scaffold suffix
AccessionClean = str_remove(`Accession Number`, "\\s*\\(\\+.*\\)"),
# Extract UniProtID if present (middle piece)
UniProtID = str_extract(AccessionClean, "(?<=\\|)[A-Z0-9]+(?=\\|)"),
# Extract entry name (right-hand piece)
EntryName = str_extract(AccessionClean, "[A-Z0-9_]+(?=\\|?$)"),
# Use UniProtID if available, else entry name
QueryID = if_else(!is.na(UniProtID), UniProtID, EntryName),
# Extract species from entry name suffix (e.g., _HUMAN, _BOVIN)
Species = str_extract(QueryID, "_[A-Z]+$") %>% str_remove("^_"),
# Create Gene symbol for human/mouse/bovine (strip species suffix)
GeneSymbol = str_remove(QueryID, "_[A-Z]+$")
)
# ----------------------------
# 3. Split by species
# ----------------------------
species_list <- unique(protein_data_clean$Species)
cat("Species detected:\n")
print(species_list)
# Prepare list to store results
go_results_list <- list()
# ----------------------------
# 4. Fetch GO annotations per species
# ----------------------------
for (sp in species_list) {
# Map gprofiler organism code
organism_code <- case_when(
sp == "HUMAN" ~ "hsapiens",
sp == "BOVIN" ~ "btaurus",
sp == "MOUSE" ~ "mmusculus",
TRUE ~ NA_character_
)
# Skip unknown species
if (is.na(organism_code)) next
# Get gene symbols for this species
genes_sp <- protein_data_clean %>%
filter(Species == sp) %>%
pull(GeneSymbol) %>%
unique()
# Fetch GO annotations
gost_sp <- gost(
query = genes_sp,
organism = organism_code,
sources = c("GO:BP", "GO:MF", "GO:CC")
)
# Store only the result table with the species column
if (!is.null(gost_sp$result)) {
go_results_list[[sp]] <- gost_sp$result %>%
mutate(Species = sp)
}
}
install.packages("readxl")
install.packages("dplyr")
install.packages("tidyr")
install.packages("ggplot2")
install.packages("pheatmap")
install.packages("gprofiler2")
install.packages("httr")
install.packages("jsonlite")
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr)
library(stringr)
library(gprofiler2)
library(httr)
library(jsonlite)
library(xml2)
print("Note: File format HAS to be in .xlsx, as R can't read the raw .xls Scaffold data. To do this, open the .xls file in
Microsoft Excel, then Save As an Excel Workbook (.xlsx) in the File Format options.")
xlsx_path <- as.character(readline(prompt = "Enter the path to your .xlsx file: "))
#knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr)
library(stringr)
library(gprofiler2)
library(httr)
library(jsonlite)
library(xml2)
print("Note: File format HAS to be in .xlsx, as R can't read the raw .xls Scaffold data. To do this, open the .xls file in
Microsoft Excel, then Save As an Excel Workbook (.xlsx) in the File Format options.")
xlsx_path <- as.character(readline(prompt = "Enter the path to your .xlsx file: "))
protein_data <- read_excel(path=xlsx_path, skip=3) # skip=3 to omit the description rows
# Remove rows where the # column isa NA
protein_data <- protein_data[!is.na(protein_data$`#`), ]
# Find the column number of 'Taxonomy' (Assuming all of the numeric data is after 'Taxonomy' column)
taxonomy_col <- which(colnames(protein_data) == "Taxonomy")
# All columns after Taxonomy are numeric samples
sample_cols <- (taxonomy_col + 1):ncol(protein_data)
# Create a new data frame with normalized values
protein_data_normalized <- protein_data %>%
mutate(across(all_of(sample_cols), ~ if_else(. == 0, 0, log2(.)))) # if value = 0, don't "log2 it", as that would result in a disruptive value (-Inf)
protein_data_normalized <- protein_data_normalized %>% dplyr::select(-c(`Molecular Weight`, `Taxonomy`, `Visible?`, `Starred?`,
`Alternate ID`, `Protein Grouping Ambiguity`))
# ----------------------------
# 2. Clean accession/entry names
# ----------------------------
protein_data_clean <- protein_data_normalized %>%
mutate(
# Remove any " (+1)" or similar scaffold suffix
AccessionClean = str_remove(`Accession Number`, "\\s*\\(\\+.*\\)"),
# Extract UniProtID if present (middle piece)
UniProtID = str_extract(AccessionClean, "(?<=\\|)[A-Z0-9]+(?=\\|)"),
# Extract entry name (right-hand piece)
EntryName = str_extract(AccessionClean, "[A-Z0-9_]+(?=\\|?$)"),
# Create Gene symbol for human/mouse/bovine (strip species suffix)
GeneSymbol = str_remove(EntryName, "_[A-Z]+$")
) %>%
# Filter out rows with no UniProtID
filter(!is.na(UniProtID))
# ----------------------------
# 2. Clean accession/entry names
# ----------------------------
protein_data_clean <- protein_data_normalized %>%
mutate(
# Remove any " (+1)" or similar scaffold suffix
AccessionClean = str_remove(`Accession Number`, "\\s*\\(\\+.*\\)"),
# Extract UniProtID if present (middle piece)
UniProtID = str_extract(AccessionClean, "(?<=\\|)[A-Z0-9]+(?=\\|)"),
# Extract entry name (right-hand piece)
EntryName = str_extract(AccessionClean, "[A-Z0-9_]+(?=\\|?$)"),
# Use UniProtID if available, else entry name
QueryID = if_else(!is.na(UniProtID), UniProtID, EntryName),
# Extract species from entry name suffix (e.g., _HUMAN, _BOVIN)
Species = str_extract(QueryID, "_[A-Z]+$") %>% str_remove("^_"),
# Create Gene symbol for human/mouse/bovine (strip species suffix)
GeneSymbol = str_remove(QueryID, "_[A-Z]+$")
)
# ----------------------------
# 3. Split by species
# ----------------------------
species_list <- unique(protein_data_clean$Species)
cat("Species detected:\n")
print(species_list)
# Prepare list to store results
go_results_list <- list()
# ----------------------------
# 4. Fetch GO annotations per species
# ----------------------------
for (sp in species_list) {
# Map gprofiler organism code
organism_code <- case_when(
sp == "HUMAN" ~ "hsapiens",
sp == "BOVIN" ~ "btaurus",
sp == "MOUSE" ~ "mmusculus",
TRUE ~ NA_character_
)
# Skip unknown species
if (is.na(organism_code)) next
# Get gene symbols for this species
genes_sp <- protein_data_clean %>%
filter(Species == sp) %>%
pull(GeneSymbol) %>%
unique()
# Fetch GO annotations
gost_sp <- gost(
query = genes_sp,
organism = organism_code,
sources = c("GO:BP", "GO:MF", "GO:CC")
)
# Store only the result table with the species column
if (!is.null(gost_sp$result)) {
go_results_list[[sp]] <- gost_sp$result %>%
mutate(Species = sp)
}
}
install.packages("jsonlite")
install.packages("httr")
install.packages("gprofiler2")
# installing Bioconductor packages
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
BiocManager::install(c("DESeq2","airway"))
#knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr)
library(stringr)
library(gprofiler2)
library(httr)
library(jsonlite)
library(xml2)
# Find the column number of 'Taxonomy' (Assuming all of the numeric data is after 'Taxonomy' column)
taxonomy_col <- which(colnames(protein_data) == "Taxonomy")
# All columns after Taxonomy are numeric samples
sample_cols <- (taxonomy_col + 1):ncol(protein_data)
# Create a new data frame with normalized values
protein_data_normalized <- protein_data %>%
mutate(across(all_of(sample_cols), ~ if_else(. == 0, 0, log2(.)))) # if value = 0, don't "log2 it", as that would result in a disruptive value (-Inf)
protein_data_normalized <- protein_data_normalized %>% dplyr::select(-c(`Molecular Weight`, `Taxonomy`, `Visible?`, `Starred?`,
`Alternate ID`, `Protein Grouping Ambiguity`))
# ----------------------------
# 2. Clean accession/entry names
# ----------------------------
protein_data_clean <- protein_data_normalized %>%
mutate(
# Remove any " (+1)" or similar scaffold suffix
AccessionClean = str_remove(`Accession Number`, "\\s*\\(\\+.*\\)"),
# Extract UniProtID if present (middle piece)
UniProtID = str_extract(AccessionClean, "(?<=\\|)[A-Z0-9]+(?=\\|)"),
# Extract entry name (right-hand piece)
EntryName = str_extract(AccessionClean, "[A-Z0-9_]+(?=\\|?$)"),
# Use UniProtID if available, else entry name
QueryID = if_else(!is.na(UniProtID), UniProtID, EntryName),
# Extract species from entry name suffix (e.g., _HUMAN, _BOVIN)
Species = str_extract(QueryID, "_[A-Z]+$") %>% str_remove("^_"),
# Create Gene symbol for human/mouse/bovine (strip species suffix)
GeneSymbol = str_remove(QueryID, "_[A-Z]+$")
)
# ----------------------------
# 3. Split by species
# ----------------------------
species_list <- unique(protein_data_clean$Species)
cat("Species detected:\n")
print(species_list)
# Prepare list to store results
go_results_list <- list()
# ----------------------------
# 4. Fetch GO annotations per species
# ----------------------------
for (sp in species_list) {
# Map gprofiler organism code
organism_code <- case_when(
sp == "HUMAN" ~ "hsapiens",
sp == "BOVIN" ~ "btaurus",
sp == "MOUSE" ~ "mmusculus",
TRUE ~ NA_character_
)
# Skip unknown species
if (is.na(organism_code)) next
# Get gene symbols for this species
genes_sp <- protein_data_clean %>%
filter(Species == sp) %>%
pull(GeneSymbol) %>%
unique()
# Fetch GO annotations
gost_sp <- gost(
query = genes_sp,
organism = organism_code,
sources = c("GO:BP", "GO:MF", "GO:CC")
)
# Store only the result table with the species column
if (!is.null(gost_sp$result)) {
go_results_list[[sp]] <- gost_sp$result %>%
mutate(Species = sp)
}
}
#knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr)
library(stringr)
library(gprofiler2)
library(httr)
library(jsonlite)
library(xml2)
# ----------------------------
# 2. Clean accession/entry names
# ----------------------------
protein_data_clean <- protein_data_normalized %>%
mutate(
# Remove any " (+1)" or similar scaffold suffix
AccessionClean = str_remove(`Accession Number`, "\\s*\\(\\+.*\\)"),
# Extract UniProtID if present (middle piece)
UniProtID = str_extract(AccessionClean, "(?<=\\|)[A-Z0-9]+(?=\\|)"),
# Extract entry name (right-hand piece)
EntryName = str_extract(AccessionClean, "[A-Z0-9_]+(?=\\|?$)"),
# Use UniProtID if available, else entry name
QueryID = if_else(!is.na(UniProtID), UniProtID, EntryName),
# Extract species from entry name suffix (e.g., _HUMAN, _BOVIN)
Species = str_extract(QueryID, "_[A-Z]+$") %>% str_remove("^_"),
# Create Gene symbol for human/mouse/bovine (strip species suffix)
GeneSymbol = str_remove(QueryID, "_[A-Z]+$")
)
# ----------------------------
# 3. Split by species
# ----------------------------
species_list <- unique(protein_data_clean$Species)
cat("Species detected:\n")
print(species_list)
# Prepare list to store results
go_results_list <- list()
# ----------------------------
# 4. Fetch GO annotations per species
# ----------------------------
for (sp in species_list) {
# Map gprofiler organism code
organism_code <- case_when(
sp == "HUMAN" ~ "hsapiens",
sp == "BOVIN" ~ "btaurus",
sp == "MOUSE" ~ "mmusculus",
TRUE ~ NA_character_
)
# Skip unknown species
if (is.na(organism_code)) next
# Get gene symbols for this species
genes_sp <- protein_data_clean %>%
filter(Species == sp) %>%
pull(GeneSymbol) %>%
unique()
# Fetch GO annotations
gost_sp <- gost(
query = genes_sp,
organism = organism_code,
sources = c("GO:BP", "GO:MF", "GO:CC")
)
# Store only the result table with the species column
if (!is.null(gost_sp$result)) {
go_results_list[[sp]] <- gost_sp$result %>%
mutate(Species = sp)
}
}
library(readxl)
library(dplyr)
library(stringr)
library(gprofiler2)
library(httr)
library(jsonlite)
library(xml2)
# ----------------------------
# 2. Clean accession/entry names
# ----------------------------
protein_data_clean <- protein_data_normalized %>%
mutate(
# Remove any " (+1)" or similar scaffold suffix
AccessionClean = str_remove(`Accession Number`, "\\s*\\(\\+.*\\)"),
# Extract UniProtID if present (middle piece)
UniProtID = str_extract(AccessionClean, "(?<=\\|)[A-Z0-9]+(?=\\|)"),
# Extract entry name (right-hand piece)
EntryName = str_extract(AccessionClean, "[A-Z0-9_]+(?=\\|?$)"),
# Use UniProtID if available, else entry name
QueryID = if_else(!is.na(UniProtID), UniProtID, EntryName),
# Extract species from entry name suffix (e.g., _HUMAN, _BOVIN)
Species = str_extract(QueryID, "_[A-Z]+$") %>% str_remove("^_"),
# Create Gene symbol for human/mouse/bovine (strip species suffix)
GeneSymbol = str_remove(QueryID, "_[A-Z]+$")
)
# ----------------------------
# 3. Split by species
# ----------------------------
species_list <- unique(protein_data_clean$Species)
cat("Species detected:\n")
print(species_list)
# Prepare list to store results
go_results_list <- list()
# ----------------------------
# 4. Fetch GO annotations per species
# ----------------------------
for (sp in species_list) {
# Map gprofiler organism code
organism_code <- case_when(
sp == "HUMAN" ~ "hsapiens",
sp == "BOVIN" ~ "btaurus",
sp == "MOUSE" ~ "mmusculus",
TRUE ~ NA_character_
)
# Skip unknown species
if (is.na(organism_code)) next
# Get gene symbols for this species
genes_sp <- protein_data_clean %>%
filter(Species == sp) %>%
pull(GeneSymbol) %>%
unique()
# Fetch GO annotations
gost_sp <- gost(
query = genes_sp,
organism = organism_code,
sources = c("GO:BP", "GO:MF", "GO:CC")
)
# Store only the result table with the species column
if (!is.null(gost_sp$result)) {
go_results_list[[sp]] <- gost_sp$result %>%
mutate(Species = sp)
}
}
# ----------------------------
# 2. Clean accession/entry names
# ----------------------------
protein_data_clean <- protein_data_normalized %>%
mutate(
# Remove any " (+1)" or similar scaffold suffix
AccessionClean = str_remove(`Accession Number`, "\\s*\\(\\+.*\\)"),
# Extract UniProtID if present (middle piece)
UniProtID = str_extract(AccessionClean, "(?<=\\|)[A-Z0-9]+(?=\\|)"),
# Extract entry name (right-hand piece)
EntryName = str_extract(AccessionClean, "[A-Z0-9_]+(?=\\|?$)"),
# Use UniProtID if available, else entry name
QueryID = if_else(!is.na(UniProtID), UniProtID, EntryName),
# Extract species from entry name suffix (e.g., _HUMAN, _BOVIN)
Species = str_extract(QueryID, "_[A-Z]+$") %>% str_remove("^_"),
# Create Gene symbol for human/mouse/bovine (strip species suffix)
GeneSymbol = str_remove(QueryID, "_[A-Z]+$")
)
# ----------------------------
# 3. Split by species
# ----------------------------
species_list <- unique(protein_data_clean$Species)
cat("Species detected:\n")
print(species_list)
# Prepare list to store results
go_results_list <- list()
# ----------------------------
# 4. Fetch GO annotations per species
# ----------------------------
for (sp in species_list) {
# Map gprofiler organism code
organism_code <- case_when(
sp == "HUMAN" ~ "hsapiens",
sp == "BOVIN" ~ "btaurus",
sp == "MOUSE" ~ "mmusculus",
TRUE ~ NA_character_
)
# Skip unknown species
if (is.na(organism_code)) next
# Get gene symbols for this species
genes_sp <- protein_data_clean %>%
filter(Species == sp) %>%
pull(GeneSymbol) %>%
unique()
# Fetch GO annotations
gost_sp <- gost(
query = genes_sp,
organism = organism_code,
sources = c("GO:BP", "GO:MF", "GO:CC")
)
# Store only the result table with the species column
if (!is.null(gost_sp$result)) {
go_results_list[[sp]] <- gost_sp$result %>%
mutate(Species = sp)
}
}
# ----------------------------
# 5. Combine all species results
# ----------------------------
go_results_combined <- bind_rows(go_results_list)
# ----------------------------
# 6. Merge back with protein expression data
# ----------------------------
df_with_go <- protein_data_clean %>%
left_join(go_results_combined %>%
select(query, term_id, term_name, source, Species),
by = c("GeneSymbol" = "query", "Species" = "Species"))
