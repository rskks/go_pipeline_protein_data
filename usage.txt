============================================================
FUNCTION USAGE GUIDE: Protein Analysis Pipeline
Author: Ronnie Yalung
Date: 2025-10-14
============================================================

OVERVIEW:
---------
This guide documents all functions used in the protein analysis pipeline. The pipeline includes:
1. Filtering proteins by GO terms or numeric expression data.
2. Interactive visualization of protein expression (heatmaps, PCA, Venn/UpSet diagrams).
3. Preparation and normalization of protein datasets.

Some functions assume that your protein data is loaded and preprocessed as described in the main R script, e.g., `protein_data_with_go` for GO filtering and `df_numeric` for numeric analysis.

------------------------------------------------------------
GROUP 1: GO TERM FILTERING FUNCTIONS
------------------------------------------------------------

1. filter_proteins_by_go(protein_df)
   - Filters proteins based on GO IDs.
   - Parameters:
     protein_df: Data frame containing protein data with GO IDs in column 'goIds'.
   - Usage Example:
     filtered <- filter_proteins_by_go(protein_data_with_go)
   - Prompts user to enter GO IDs (comma-separated).

2. filter_proteins_by_go_names(protein_df)
   - Filters proteins using GO term keywords (contains/fuzzy match).
   - Parameters:
     protein_df: Data frame with 'goNames' column.
   - Usage Example:
     filtered <- filter_proteins_by_go_names(protein_data_with_go)
   - Prompts user to enter keywords (comma-separated).

3. filter_proteins_by_go_names_strict(protein_df)
   - Filters proteins using exact GO term names.
   - Parameters:
     protein_df: Data frame with 'goNames' column.
   - Usage Example:
     filtered <- filter_proteins_by_go_names_strict(protein_data_with_go)
   - Prompts user to enter exact GO term names.

4. filter_proteins_by_go_combined(protein_df)
   - Filters proteins using both GO IDs and GO term keywords (contains/fuzzy match).
   - Parameters:
     protein_df: Data frame with 'goIds' and 'goNames'.
   - Usage Example:
     filtered <- filter_proteins_by_go_combined(protein_data_with_go)
   - Prompts user to enter GO IDs and/or keywords.
   - Combines filtering with logical OR (matches either ID or keyword).

5. filter_proteins_by_go_combined_strict(protein_df)
   - Filters proteins using both GO IDs and exact GO term names.
   - Parameters:
     protein_df: Data frame with 'goIds' and 'goNames'.
   - Usage Example:
     filtered <- filter_proteins_by_go_combined_strict(protein_data_with_go)
   - Logical OR is applied (matches either ID or exact name).

6. run_go_filter(protein_df)
   - Interactive wrapper to select which GO filter function to run.
   - Prompts user to choose from the 5 GO filtering functions above.
   - Usage Example:
     filtered_proteins <- run_go_filter(protein_data_with_go)

------------------------------------------------------------
GROUP 2: NUMERIC DATA FILTERING
------------------------------------------------------------

1. filter_numeric_protein_data(data, gene_symbols=NULL, protein_samples=NULL,
                               top_n_genes=NULL, expression_threshold=NULL, combine_logic="AND")
   - Filters numeric protein expression datasets based on multiple criteria.
   - Parameters:
     data: Data frame with rownames = GeneSymbols and numeric columns = protein samples.
     gene_symbols: Vector of GeneSymbols to keep (default NULL = all).
     protein_samples: Vector of column names to keep (default NULL = all).
     top_n_genes: Integer; keep top N genes by mean expression (default NULL = keep all).
     expression_threshold: Vector c("operator", value), e.g., c(">", 2) to filter rows.
       Valid operators: ">", ">=", "<", "<=", "==".
     combine_logic: "AND" or "OR" when combining multiple filters (default = "AND").
   - Usage Examples:
     # Keep top 50 expressing genes
     top50 <- filter_numeric_protein_data(df_numeric, top_n_genes=50)

     # Keep genes with expression >2 in any sample
     filtered <- filter_numeric_protein_data(df_numeric, expression_threshold=c(">",2))

     # Keep only specific genes and samples
     filtered <- filter_numeric_protein_data(df_numeric, gene_symbols=c("KRT1","TP53"), protein_samples=c("HNPCC_CL","HCF_EV"))

     # Keep genes TP53, BRCA1, MYC
     # Only columns Sample1, Sample2
     # Expression â‰¥ 1 in any column
     # Then top 5 genes by mean
     filtered <- filter_numeric_protein_data(
       data = protein_data,
       gene_symbols = c("TP53", "BRCA1", "MYC"),
       protein_samples = c("Sample1", "Sample2"),
       expression_threshold = c(">=", 1),
       top_n_genes = 5
     )

------------------------------------------------------------
GROUP 3: DATA VISUALIZATION FUNCTIONS
------------------------------------------------------------

1. plot_interactive_protein_heatmap(data, cluster_rows=TRUE, cluster_columns=TRUE,
                                    zero_color="lightgray", low_color="blue",
                                    mid_color="yellow", high_color="red",
                                    min_value=0, mid_value=5, max_value=10,
                                    tooltip_precision=3)
   - Creates an interactive heatmap of protein expression.
   - Parameters:
     data: Numeric dataframe with rownames = GeneSymbols.
     cluster_rows / cluster_columns: TRUE/FALSE to perform hierarchical clustering.
     zero_color: Color for zero or NA values.
     low_color, mid_color, high_color: Gradient colors.
     min_value, mid_value, max_value: Clipping values for gradient.
     tooltip_precision: Number of decimal places in tooltip.
   - Usage Example:
     heatmap_plot <- plot_interactive_protein_heatmap(TESTdf, cluster_rows=FALSE, cluster_columns=FALSE)
     heatmap_plot  # Display interactive heatmap

2. plot_protein_venn(data)
   - Creates a Venn diagram or UpSet diagram for protein presence across selected columns.
   - Parameters:
     data: Numeric dataframe with rownames = GeneSymbols.
   - Prompts user to select columns to include.
   - Automatically switches to UpSet plot if more than 5 sets are selected.
   - Usage Example:
     plot_protein_venn(TESTdf)

------------------------------------------------------------
GROUP 4: GO TERM FETCHING FUNCTION
------------------------------------------------------------

1. fetch_go_for_protein(uniprot_id)
   - Fetches GO terms for a single protein from QuickGO API.
   - Parameters:
     uniprot_id: Character string of UniProt ID.
   - Returns tibble with list-columns: goIds, goNames, ontology.
   - Usage Example:
     go_info <- fetch_go_for_protein("P12345")

------------------------------------------------------------
GENERAL USAGE NOTES
------------------------------------------------------------
- Always load required packages at the start (see pipeline script).
- Ensure data is normalized and cleaned before using filter or visualization functions.
- For numeric analyses, ensure rownames = GeneSymbols and all columns numeric.
- Functions with interactive prompts (e.g., run_go_filter, plot_protein_venn) require user input at runtime.
- Functions handle errors gracefully; zero-variance columns or missing values are automatically managed in PCA and heatmap functions.

------------------------------------------------------------
EXAMPLE WORKFLOW
------------------------------------------------------------
# 1. Filter proteins by GO term
filtered_proteins <- run_go_filter(protein_data_with_go)

# 2. Prepare numeric dataframe
df_numeric <- filtered_proteins %>%
  select(where(is.numeric), GeneSymbol) %>%
  as.data.frame()
df_numeric$GeneSymbol[is.na(df_numeric$GeneSymbol) | df_numeric$GeneSymbol == ""] <- "Unknown"
rownames(df_numeric) <- make.unique(df_numeric$GeneSymbol)
df_numeric$GeneSymbol <- NULL
df_numeric[is.na(df_numeric)] <- 0

# 3. Filter numeric data
TESTdf <- filter_numeric_protein_data(df_numeric, top_n_genes=50, expression_threshold=c(">",2))

# 4. Visualize
heatmap_plot <- plot_interactive_protein_heatmap(TESTdf, cluster_rows=FALSE)
heatmap_plot
plot_protein_venn(TESTdf)
plot_protein_pca(TESTdf)
